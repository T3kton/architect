#!/usr/bin/env python3

import os
import django

os.environ.setdefault( 'DJANGO_SETTINGS_MODULE', 'architect.settings' )
django.setup()

from datetime import datetime, timedelta, timezone

from django.db.models import Count

from architect.Plan.models import Plan
from architect.Builder.models import Instance, Action

from architect.Plan.caculator import caculateCounts, caculateChangePlan

CLEANUP_DESTROYED_AFFTER = 3600  # in seconds

# IMPORTANT!!!! this dosen't have any locking, only one cron process at a time
# Also: this really need through testing, make sure to  test when there are jobs/Actions inflight

for instance in Instance.objects.filter( state='destroyed', updated__lt=datetime.now( timezone.utc ) - timedelta( seconds=CLEANUP_DESTROYED_AFFTER ) ):
  print( 'Cleaning up destroyed "{0}"...'.format( instance ) )
  instance.delete()

for plan in Plan.objects.filter( enabled=True ):  # TODO: check cooldown delay, make sure there are not any jobs running
  print( 'doing plan "{0}"...'.format( plan ) )

  if plan.change_cooldown > 0 and plan.last_change > datetime.now( timezone.utc ) - timedelta( seconds=plan.change_cooldown ):
    print( 'still hot, skipping...' )
    continue

  complex_name_list = []
  complex_cost_list = []
  complex_availability_list = []
  complex_reliability_list = []
  for pc in plan.plancomplex_set.all().order_by( 'id' ):  # Important the complexes are evaulated in a consistant order_by
    complex_name_list.append( pc.complex.tsname )
    complex_cost_list.append( pc.cost.last_value )
    complex_availability_list.append( pc.availability.last_value )
    complex_reliability_list.append( pc.reliability.last_value )

  print( complex_name_list )
  print( complex_cost_list )
  print( complex_availability_list )
  print( complex_reliability_list )

  target_map = caculateCounts( plan, complex_name_list, complex_cost_list, complex_availability_list, complex_reliability_list )

  current_map = {}
  for blueprint_name in target_map.keys():
    current_map[ blueprint_name ] = dict( ( i[ 'complex__tsname' ], i[ 'count' ] ) for i in Instance.objects.filter( plan=plan, blueprint__name=blueprint_name ).exclude( state='destroyed' ).values( 'complex__tsname' ).annotate( count=Count( 'id' ) ) )

  print( 'current' )
  print( current_map )
  print( 'target' )
  print( target_map )

  change_list = caculateChangePlan( plan, complex_name_list, target_map, current_map )
  print( change_list )

  if not change_list:
    continue

  plan.last_change = datetime.now( timezone.utc )
  plan.full_clean()
  plan.save()

  for change in change_list:
    if change[0] == 'create':
      _, complex_name, blueprint_name = change
      instance = Instance.create( plan, complex_name, blueprint_name )
      Action.create( instance, 'build' )
      print( 'new instance "{0}"'.format( instance ) )

    elif change[0] == 'destroy':
      _, instance = change
      if instance.state == 'destroyed':
        print( 'Instance "{0}" allready destroyed, ignorning' )

      else:
        try:
          action = instance.action
        except AttributeError:
          action = None

        if action is not None:
          if action.state == {}:
            print( 'delete unused instance "{0}"'.format( instance ) )
            instance.action.delete()
            instance.delete()

          else:
            print( 'action is still busy, ignoring request to destroy' )

        else:
          print( 'unrequesting "{0}"'.format( instance ) )
          Action.create( instance, 'destroy' )

    elif change[0] == 'move':
      _, instance, complex_name = change
      print( 'moving "{0}" to "{1}"'.format( instance, complex_name ) )
      if instance.state == 'destroyed':
        print( '  Instance "{0}" allready destroyed, ignorning' )

      else:
        try:
          action = instance.action
        except AttributeError:
          action = None

        if action is not None:
          if action.state == {}:
            print( ' delete unused instance "{0}"'.format( instance ) )
            blueprint_name = instance.blueprint_name
            instance.action.delete()
            instance.delete()

            instance = Instance.create( plan, complex_name, blueprint_name )
            Action.create( instance, 'build' )
            print( '  new instance "{0}"'.format( instance ) )

          else:
            print( 'action is still busy, ignoring request to move' )

        else:
          Action.create( instance, 'move', complex_name )

    else:
      raise ValueError( 'Unknown change "{0}"'.format( change ) )
